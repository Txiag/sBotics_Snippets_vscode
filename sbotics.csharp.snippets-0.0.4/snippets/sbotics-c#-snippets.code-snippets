{
     "bc.wait": {
          "prefix": "bc.wait",
          "body": [
               "bc.wait(${1:ms})",
          ],
          "description": "Espera de um tempo em millissegundos"
     },
     "bc.distance": {
          "prefix": "bc.distance",
          "body": [
               "bc.distance(${1:sensor})",
          ],
          "description": "Distância percebida pelo sensor de ultrassom"
     },
     "bc.compass": {
          "prefix": "bc.compass",
          "body": [
               "bc.compass()",
          ],
          "description": "Retorna o ângulo do robô em relação ao norte geográfico"
     },
     "bc.inclination": {
          "prefix": "bc.inclination",
          "body": [
               "bc.inclination()",
          ],
          "description": "Retorna o ângulo de inclinação do robô em relação ao plano da arena"
     },
     "bc.detectDistance": {
          "prefix": "bc.detectDistance",
          "body": [
               "bc.detectDistance(${1:sensor}, ${2:min}, ${3:max})",
          ],
          "description": "Retorna 'true' caso o sensor detecte um objeto a um intervalo de distância definido"
     },
     "bc.onTF": {
          "prefix": "bc.onTF",
          "body": [
               "bc.onTF(${1:dir}, ${2:esq})",
          ],
          "description": "Controla os motores"
     },
     "bc.returnColor": {
          "prefix": "bc.returnColor",
          "body": [
               "bc.returnColor(${1:sensor})",
          ],
          "description": "Retorna a cor percebida em uma string"
     },
     "bc.lightness": {
          "prefix": "bc.lightness",
          "body": [
               "bc.lightness(${1:sensor})",
          ],
          "description": "Retorna uma float da quantidade de luz percebida pelo sensor"
     },
     "bc.printLCD": {
          "prefix": "bc.printLCD",
          "body": [
               "bc.printLCD(${1:linha}, ${2:msg});",
          ],
          "description": "Imprime na linha especificada do console"
     },
     "ToString": {
          "prefix": "ToString",
          "body": [
               "ToString()",
          ],
          "description": "Converte um valor numérico para string"
     },
     "bc.openActuator": {
          "prefix": "bc.openActuator",
          "body": [
               "bc.openActuator()",
          ],
          "description": "Abre a garra da empilhadeira"
     },
     "bc.closeActuator": {
          "prefix": "bc.closeActuator",
          "body": [
               "bc.closeActuator()",
          ],
          "description": "Fecha a garra da empilhadeira"
     },
     "bc.actuatorUp": {
          "prefix": "bc.actuatorUp",
          "body": [
               "bc.actuatorUp(${1:ms})",
          ],
          "description": "Levanta o atuador pelo tempo indicado em ms"
     },
     "bc.actuatorDown": {
          "prefix": "bc.actuatorDown",
          "body": [
               "bc.actuatorDown(${1:ms})",
          ],
          "description": "Abaixa o atuador pelo tempo indicado em ms"
     },
     "bc.turnActuatorUp": {
          "prefix": "bc.turnActuatorUp",
          "body": [
               "bc.turnActuatorUp(${1:ms})",
          ],
          "description": "Gira o atuador para cima pelo tempo indicado em ms"
     },
     "bc.turnActuatorDown": {
          "prefix": "bc.turnActuatorDown",
          "body": [
               "bc.turnActuatorDown(${1:ms})",
          ],
          "description": "Gira o atuador para cima pelo tempo indicado em ms"
     },
     "bc.clearLCD": {
          "prefix": "bc.clearLCD",
          "body": [
               "bc.clearLCD()",
          ],
          "description": "Apaga todo texto escrito no console"
     },
     "bc.millis": {
          "prefix": "bc.millis",
          "body": [
               "bc.millis()",
          ],
          "description": "Retorna o tempo em ms decorrido desde o início da rotina"
     },
     "bc.returnGreen": {
          "prefix": "bc.returnGreen",
          "body": [
               "bc.returnGreen(${1:sensor})",
          ],
          "description": "Retorna a intensidade da cor verde percebida pelo sensor"
     },
     "bc.returnRed": {
          "prefix": "bc.returnRed",
          "body": [
               "bc.returnRed(${1:sensor})",
          ],
          "description": "Retorna a intensidade da cor vermelha percebida pelo sensor"
     },
     "bc.returnBlue": {
          "prefix": "bc.returnBlue",
          "body": [
               "bc.returnBlue(${1:sensor})",
          ],
          "description": "Retorna a intensidade da cor azul percebida pelo sensor"
     },
     "bc.onTFRot": {
          "prefix": "bc.onTFRot",
          "body": [
               "bc.onTFRot(${1:vel}, ${2:ang})",
          ],
          "description": "Rotaciona em torno do eixo a angulação definida"
     },
     "bc.touch": {
          "prefix": "bc.touch",
          "body": [
               "bc.touch(0)",
          ],
          "description": "Retorna o estado do sensor de toque"
     },
     "bc.angleActuator": {
          "prefix": "bc.angleActuator",
          "body": [
               "bc.angleActuator()",
          ],
          "description": "Retorna o ângulo de inclinação do atuador do robô em relação ao plano"
     },
     "bc.actuatorSpeed": {
          "prefix": "bc.actuatorSpeed",
          "body": [
               "bc.actuatorSpeed(${1:vel})",
          ],
          "description": "Define a velocidade de movimentação dos atuadores."
     },
     "bc.turnLedOn": {
          "prefix": "bc.turnLedOn",
          "body": [
               "bc.turnLedOn(${1: COR})",
          ],
          "description": "Para RGB coloque os valores entre vírgulas. Acende o led na cor especificada em string"
     },
     "bc.turnLedOff": {
          "prefix": "bc.turnLedOff",
          "body": [
               "bc.turnLedOff()",
          ],
          "description": "Desliga o led"
     },
     "bc.onTFRotations": {
          "prefix": "bc.onTFRotations",
          "body": [
               "bc.onTFRotations(${1:vel}, ${2:rot})",
          ],
          "description": "Move o robô em rotações na velocidade definida."
     },
     "bc.saveLCD": {
          "prefix": "bc.saveLCD",
          "body": [
               "bc.saveLCD()",
          ],
          "description": "Habilita o registro em arquivo do conteúdo do console"
     },
     "bc.stopSavingLCD": {
          "prefix": "bc.stopSavingLCD",
          "body": [
               "bc.stopSavingLCD()",
          ],
          "description": "Para o registro do console"
     },
     "bc.randomLimits": {
          "prefix": "bc.randomLimits",
          "body": [
               "bc.randomLimits(${1:min}, ${2:max})",
          ],
          "description": "Retorna um número aleatório entre os números fornecidos"
     },
     "bc.timer": {
          "prefix": "bc.timer",
          "body": [
               "bc.timer()",
          ],
          "description": "Retorna o tempo em ms desde o início da rotina ou desde o último zerartemporizador()"
     },
     "bc.resetTimer": {
          "prefix": "bc.resetTimer",
          "body": [
               "bc.resetTimer()",
          ],
          "description": "Zera o temporizador"
     },
     "bc.clearLCDLine": {
          "prefix": "bc.clearLCDLine",
          "body": [
               "bc.clearLCDLine(${1:linha})",
          ],
          "description": "Apaga o texto escrito na linha do console"
     },
     "bc.writeText": {
          "prefix": "bc.writeText",
          "body": [
               "bc.writeText(${1:string})",
          ],
          "description": "Registra o texto informado no arquivo consoleLog.txt"
     },
     "bc.writeNumber": {
          "prefix": "bc.writeNumber",
          "body": [
               "bc.writeNumber(${1:string})",
          ],
          "description": "Registra o número informado no arquivo consoleLog.txt"
     },
     "switch": {
          "prefix": "switch",
          "body": [
               "switch (${1:var}) {",
               "",
               "case Valor1:",
               "   ${2:Comando}",
               "",
               "default:",
               "    ${3:Comando}",
               "}"
          ],
          "description": "Cria testes com variaveis"
     },
     "bc.onTFRight": {
          "prefix": "bc.onTFRight",
          "body": [
               "bc.onTFRight(${1:vel})",
          ],
          "description": "Aplica a força indicada no motor da direita"
     },
     "bc.onTFLeft": {
          "prefix": "bc.onTFLeft",
          "body": [
               "bc.onTFLeft(${1:vel})",
          ],
          "description": "Aplica a força indicada no motor da esquerda"
     },
     "bc.colorSens": {
          "prefix": "bc.colorSens",
          "body": [
               "bc.colorSens(${1:val})",
          ],
          "description": "Ajusta a sensibilidade do sensor de cor"
     },
     "bc.angleBucket": {
          "prefix": "bc.angleBucket",
          "body": [
               "bc.angleBucket()",
          ],
          "description": "Retorna o número correspondente ao ângulo de giro do atuador robô em relação ao plano"
     },
     "bc.setPrecision": {
          "prefix": "bc.setPrecision",
          "body": [
               "bc.setPrecision(${1:val})",
          ],
          "description": "Ajusta a quantidade de casas decimais"
     },
     "bc.playNote": {
          "prefix": "bc.playNote",
          "body": [
               "bc.playNote(${1:buzzer}, ${2:nota}, ${3:ms})",
          ],
          "description": "Toca uma nota musical pelo tempo indicado no alto-falante especificado"
     },
     "bc.playSound": {
          "prefix": "bc.playSound",
          "body": [
               "bc.playSound(${1:buzzer}, ${2:freq}, ${3:ms}, ${4:onda})",
          ],
          "description": "Toca no alto-falante informado, a frequência especificada por um determinado tempo utilizando a onda informada."
     },
     "bc.changeWave": {
          "prefix": "bc.changeWave",
          "body": [
               "bc.changeWave(${1:onda})",
          ],
          "description": "Ajusta o tipo de onda que irá modular o som emitido na função tocar"
     },
     "if": {
          "prefix": "if",
          "body": [
               "if (${1:condicao}) {",
               "   ${2:Comandos}",
               "}",
          ],
          "description": "Estrutura condicional IF"
     },
     "ifelse": {
          "prefix": "ifelse",
          "body": [
               "ifelse (${1:condicao}) {",
               "   ${2:Comandos}",
               "} else {",
               "   ${3:Comandos}",
               "}",
          ],
          "description": "Estrutura condicional IF ELSE"
     },
     "ifelseif": {
          "prefix": "ifelseif",
          "body": [
               "ifelseif (${1:condicao}) {",
               "   ${2:Comandos}",
               "} else if (${3:condicao}) {",
               "   ${4:Comandos}",
               "}",
          ],
          "description": "Estrutura condicional IF ELSE IF"
     },
     "bc.stopSound": {
          "prefix": "bc.stopSound",
          "body": [
               "bc.stopSound()",
          ],
          "description": "Coloque um valor caso queira especificar o buzzer"
     },
     "bc.toFrequency": {
          "prefix": "bc.toFrequency",
          "body": [
               "bc.toFrequency(${1:val})",
          ],
          "description": "Converte o valor de frequência em Hertz especificado para a unidade de frequência do simulador"
     },
     "bc.toHertz": {
          "prefix": "bc.toHertz",
          "body": [
               "bc.toHertz(${1:val})",
          ],
          "description": "Converte o valor de frequência na unidade do simulador especificado para Hertz"
     },
     "bc.playSoundHertz": {
          "prefix": "bc.playSoundHertz",
          "body": [
               "bc.playSoundHertz(${1:buzzer}, ${2:freq}, ${3:ms}, ${4:onda})",
          ],
          "description": "Toca no alto-falante informado, a frequência especificada por um determinado tempo utilizando a onda informada"
     },
     "bc.getonTFRight": {
          "prefix": "bc.getonTFRight",
          "body": [
               "bc.getonTFRight()",
          ],
          "description": "Retorna a velocidade do motor da direita"
     },
     "bc.getonTFLeft": {
          "prefix": "bc.getonTFLeft",
          "body": [
               "bc.getonTFLeft()",
          ],
          "description": "Retorna a velocidade do motor da esquerda"
     },
     "bc.booleanToString": {
          "prefix": "bc.booleanToString",
          "body": [
               "bc.booleanToString(${1:bool})",
          ],
          "description": "Converte bool para string"
     },
     "bc.writeBoolean": {
          "prefix": "bc.writeBoolean",
          "body": [
               "bc.writeBoolean(${1:bool})",
          ],
          "description": "Registra o booleano informado no arquivo consoleLog.txt"
     },
     "bc.paint": {
          "prefix": "bc.paint",
          "body": [
               "bc.paint()",
          ],
          "description": "Habilita o pincel para pintura"
     },
     "bc.stopPainting": {
          "prefix": "bc.stopPainting",
          "body": [
               "bc.stopPainting()",
          ],
          "description": "Recolhe o pincel interrompendo a pintura"
     },
     "bc.changePencilColor": {
          "prefix": "bc.changePencilColor",
          "body": [
               "bc.changePencilColor(${1:COR})",
          ],
          "description": "Para RGB coloque os números entre vírgulas"
     },
     "bc.turnFanOn": {
          "prefix": "bc.turnFanOn",
          "body": [
               "bc.turnFanOn()",
          ],
          "description": "Liga o ventilador do Robô 3"
     },
     "bc.turnFanOff": {
          "prefix": "bc.turnFanOff",
          "body": [
               "bc.turnFanOff()",
          ],
          "description": "Desiga o ventilador do Robô 3"
     },
     "bc.heat": {
          "prefix": "bc.heat",
          "body": [
               "bc.heat()",
          ],
          "description": "Retorna a temperatura percebida pelo sensor de temperatura"
     },
     "bc.hasVictims": {
          "prefix": "bc.hasVictims",
          "body": [
               "bc.hasVictims()",
          ],
          "description": "Retorna verdadeiro se existir uma ou mais vítimas no atuador"
     },
}